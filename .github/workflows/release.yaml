name: Release

on:
  push:
    branches:
      - master
      - main
      
  workflow_dispatch:
    inputs:
      bump:
        description: bump rule (major|minor|patch|premajor|preminor|prepatch|prerelease)
        default: prerelease
        required: false

      version:
        description: manual version
        default: ''
        required: false

      skip_java: 
        description: skip java? (yes|no)
        default: 'no'
        required: false
      
      skip_python: 
        description: skip python? (yes|no)
        default: 'no'
        required: false
      
      skip_scala: 
        description: skip scala? (yes|no)
        default: 'no'
        required: false

      release:
        description: release type (local|global)
        default: local
        required: false
        
# Secrets:
#   pypi_token - pypi API token
#   SONATYPE_USER - oss.sonatype.org
#   SONATYPE_TOKEN - password
#   GPG_PRIVATE_KEY_PASS - passphrase gpg
#   GPG_PRIVATE_KEY_SONATYPE - gpg keyring
      
jobs:
  Release:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    env:
      BUMP: ${{ github.event.inputs.bump }} # default values for push-triggered run
      RELEASE: local
      VERSION: ${{ github.event.inputs.version }}
    steps:
      - name: Validate inputs  #TODO create an action for this
        if: github.event_name == 'workflow_dispatch'
        run: |
          case ${{ github.event.inputs.bump }} in
            major)
              ;;
            premajor)
              ;;
            minor)
              ;;
            preminor)
              ;;
            patch)
              ;;
            prepatch)
              ;;
            prerelease)
              ;;
            *)
              echo "invalid bump rule: ${{ github.event.inputs.bump }}"
              exit 1
              ;;
          esac
          
          case ${{ github.event.inputs.release }} in 
            local)
              ;;
            global)
              ;;
            *)
              echo invalid release type: ${{ github.event.inputs.release }}
              exit 1
              ;;
          esac

          case ${{ github.event.inputs.skip_java }} in 
            'yes')
              ;;
            'no')
              ;;
            *)
              echo invalid skip_java type: ${{ github.event.inputs.skip_java }}
              exit 1
              ;;
          esac

          case ${{ github.event.inputs.skip_python }} in 
            'yes')
              ;;
            'no')
              ;;
            *)
              echo invalid skip_python type: ${{ github.event.inputs.skip_python }}
              exit 1
              ;;
          esac

          case ${{ github.event.inputs.skip_scala }} in 
            'yes')
              ;;
            'no')
              ;;
            *)
              echo invalid skip_scala type: ${{ github.event.inputs.skip_scala }}
              exit 1
              ;;
          esac
          
          echo BUMP=${{ github.event.inputs.bump }} >> $GITHUB_ENV
          echo RELEASE=${{ github.event.inputs.release }} >> $GITHUB_ENV
          echo VERSION=${{ github.event.inputs.version }} >> $GITHUB_ENV

      # Checkout and prerequisite tools        
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2.2.2
        with:
          python-version: 3.7
          
      - name: Setup poetry
        uses: abatilo/actions-poetry@v2.1.0

      - name: Setup scala
        uses: olafurpg/setup-scala@v10
        with:
          java-version: adopt@1.11

      - name: Set scala credentials
        run: | 
          mkdir -p ./.sbt/1.0
          cat << EOF > ./.sbt/1.0/sonatype.sbt 
            credentials += Credentials("Sonatype Nexus Repository Manager",
            "oss.sonatype.org",
            "${{ secrets.sonatype_user }}",
            "${{ secrets.sonatype_token }}")
          EOF
        
      - name: Restore cache
        uses: actions/cache@v2.1.5
        with:
          path: |
            ~/.ivy2/cache
            ~/.sbt
          key: ${{ runner.os }}-sbt-${{ hashFiles('**/build.sbt', '**/Dependencies.scala') }}   

      # Build Python    
      - name: Install dependencies
        if: github.event.inputs.skip_python != 'yes'
        run: make py_requirements
        
      - name: bump version
        if: env.VERSION  == ''
        run: cd python-package && poetry version ${{ env.BUMP }}
        
      - name: force bump version
        if: env.VERSION  != ''
        run: cd python-package && poetry version ${{ env.VERSION }}
        
      - name: Build python
        if: github.event.inputs.skip_python != 'yes'
        run: make python

      - name: Add version env
        run: echo VERSION=$(cd python-package && poetry version -s) >> $GITHUB_ENV
      
      - name: Save new version 
        run: echo ${{ env.VERSION }} > version

      # Publish scala and python
      - name: Import gpg
        run: echo $PGP_SECRET | base64 --decode | gpg --no-tty --yes --batch --import --passphrase $PGP_PASSPHRASE
        env:
          PGP_PASSPHRASE: ${{ secrets.GPG_PRIVATE_KEY_PASS }}
          PGP_SECRET: ${{ secrets.GPG_PRIVATE_KEY_SONATYPE }}

      - name: Export asc
        run: |
          mkdir -p ~/secret
          echo use-agent >> ~/.gnupg/gpg.conf
          echo pinentry-mode loopback >> ~/.gnupg/gpg.conf
          echo allow-loopback-pinentry >> ~/.gnupg/gpg-agent.conf
          echo RELOADAGENT | gpg-connect-agent
          gpg --no-tty --batch --yes --output ~/secret/robot.gpg --passphrase $PGP_PASSPHRASE --export blutfullin@hydrosphere.io
          echo 'Global / pgpKeyRing := Some(file("~/secret/robot.gpg"))' >> ./scala-package/build.sbt
          echo 'Global / pgpKeyRing := Some(file("~/secret/robot.gpg"))' >> ./java-package/gradlew
        env:
          PGP_PASSPHRASE: ${{ secrets.GPG_PRIVATE_KEY_PASS }}

      - name: Publish java
        if: github.event.inputs.skip_java != 'yes'
        continue-on-error: true
        env:
          GRADLE_PROPERTIES: ${{ secrets.GRADLE_PROPERTIES }}
          PGP_PASSPHRASE: ${{ secrets.GPG_PRIVATE_KEY_PASS }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_TOKEN }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USER }}
        run: |
          cd java-package
          echo ${GRADLE_PROPERTIES} > ./gradle.properties
          ./gradlew build -x signArchives

      - name: Publish scala
        if: github.event.inputs.skip_scala != 'yes'
        continue-on-error: true
        env:
          PGP_PASSPHRASE: ${{ secrets.GPG_PRIVATE_KEY_PASS }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_TOKEN }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USER }}
        run: |
          cd scala-package && sbt -DappVersion=${{ env.VERSION }} +publishSigned sonatypeReleaseAll

      - name: Publish python
        if: github.event.inputs.skip_python != 'yes'
        continue-on-error: true
        run: cd python-package && poetry publish -u __token__ -p ${{ secrets.pypi_token }}

      - name: Tag and push changes
        id: tag
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git commit -a --allow-empty -m "release version ${{ env.VERSION }}"
          git push

      - name: Reports
        id: generate-output
        run: echo "::set-output name=tag-output::${{ env.VERSION }}"

      - name: Create github release
        uses: meeDamian/github-release@2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.VERSION }}

    outputs:
      tag: ${{ steps.generate-output.outputs.tag-output }}
          
  slackNotification:
    name: Slack Notification
    needs: Release
    runs-on: ubuntu-latest
    steps:
    - name: Slack Notification success
      if: ${{ success() }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: hydrosphere
        SLACK_USERNAME: HydroRobot
        SLACK_ICON: https://avatars.githubusercontent.com/u/17550625?s=200&v=4
        SLACK_COLOR: ${{ job.status }}
        SLACK_TITLE: Build status - success
        SLACK_MESSAGE: "Releasing hydro-serving-grpc ${{ needs.Release.outputs.tag }} :rocket:"
        MSG_MINIMAL: true

    - name: Slack Notification failure
      if: ${{ failure() }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: hydrosphere
        SLACK_USERNAME: HydroRobot
        SLACK_ICON: https://avatars.githubusercontent.com/u/17550625?s=200&v=4
        SLACK_COLOR: ${{ job.status }}
        SLACK_TITLE: Build status - failure
        SLACK_MESSAGE: "Check build $GITHUB_RUN_ID status"
        MSG_MINIMAL: true